# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from can_package/FEEDBACK.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import can_package.msg

class FEEDBACK(genpy.Message):
  _md5sum = "f344d1fad6e38400d9bbe521baaeced1"
  _type = "can_package/FEEDBACK"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """can_package/FB_EAIT_EPS container_710
can_package/FB_EAIT_SCC container_711
can_package/FB_EAIT_SPD container_712
can_package/FB_EAIT_IMU container_713

================================================================================
MSG: can_package/FB_EAIT_EPS

bool EPS_En_FB          # 4|1@1+ (1,0) [0|1]
bool Override_state     # 7|1@1+ (1,0) [0|1]
uint8 EPS_control_state # 0|4@1+ (1,0) [0|10]
float32 Steering_angle  # 8|16@1- (0.1,0) [-540|540] deg
bool Control_SW_FB      # 5|1@1+ (1,0) [0|1]
uint16 Str_Tq_1        # 24|13@1+ (0.01,-20.48) [-20.48|61.43]
uint16 Str_Tq_2        # 40|12@1+ (0.1,-204.8) [-204.8|204.7]
uint8 FB_alive_count    # 56|8@1+ (1,0) [0|255]

================================================================================
MSG: can_package/FB_EAIT_SCC

uint8 ACC_control_state  # 0|4@1+ (1,0) [0|10]
bool EPS_En_FB           # 4|1@1+ (1,0) [0|1]
bool Override_ACC_state  # 6|1@1+ (1,0) [0|1]
bool Override_BRK_state  # 7|1@1+ (1,0) [0|1]
uint8 Vehicle_speed      # 8|8@1+ (1,0) [0|255] kph
bool AEB_state           # 5|1@1+ (1,0) [0|1]
float32 Long_Accel       # 16|16@1+ (0.000127465,-4.17677312) [-4.17677312|4.176645655] m/s^2
uint8 Gear_Disp          # 32|4@1+ (1,0) [0|15]

================================================================================
MSG: can_package/FB_EAIT_SPD

uint16 WHL_SPD_FL    # 0|14@1+ (0.03125,0) [0|511.96875]
uint16 WHL_SPD_FR    # 16|14@1+ (0.03125,0) [0|511.96875]
uint16 WHL_SPD_RL    # 32|14@1+ (0.03125,0) [0|511.96875]
uint16 WHL_SPD_RR    # 48|14@1+ (0.03125,0) [0|511.96875]

================================================================================
MSG: can_package/FB_EAIT_IMU
float32 Lat_Accel    # 16|16@1+ (0.000127564,-4.17677312) [-4.17677312|4.18313362] m/s^2
float32 Yaw_Rate     # 32|16@1+ (0.005,-163.84) [-163.84|163.835] deg/s
float32 Long_Accel   # 0|16@1+ (0.001249157,-40.9323) [-40.9323|4.176645655] m/s^2
"""
  __slots__ = ['container_710','container_711','container_712','container_713']
  _slot_types = ['can_package/FB_EAIT_EPS','can_package/FB_EAIT_SCC','can_package/FB_EAIT_SPD','can_package/FB_EAIT_IMU']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       container_710,container_711,container_712,container_713

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FEEDBACK, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.container_710 is None:
        self.container_710 = can_package.msg.FB_EAIT_EPS()
      if self.container_711 is None:
        self.container_711 = can_package.msg.FB_EAIT_SCC()
      if self.container_712 is None:
        self.container_712 = can_package.msg.FB_EAIT_SPD()
      if self.container_713 is None:
        self.container_713 = can_package.msg.FB_EAIT_IMU()
    else:
      self.container_710 = can_package.msg.FB_EAIT_EPS()
      self.container_711 = can_package.msg.FB_EAIT_SCC()
      self.container_712 = can_package.msg.FB_EAIT_SPD()
      self.container_713 = can_package.msg.FB_EAIT_IMU()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3BfB2H7BfB4H3f().pack(_x.container_710.EPS_En_FB, _x.container_710.Override_state, _x.container_710.EPS_control_state, _x.container_710.Steering_angle, _x.container_710.Control_SW_FB, _x.container_710.Str_Tq_1, _x.container_710.Str_Tq_2, _x.container_710.FB_alive_count, _x.container_711.ACC_control_state, _x.container_711.EPS_En_FB, _x.container_711.Override_ACC_state, _x.container_711.Override_BRK_state, _x.container_711.Vehicle_speed, _x.container_711.AEB_state, _x.container_711.Long_Accel, _x.container_711.Gear_Disp, _x.container_712.WHL_SPD_FL, _x.container_712.WHL_SPD_FR, _x.container_712.WHL_SPD_RL, _x.container_712.WHL_SPD_RR, _x.container_713.Lat_Accel, _x.container_713.Yaw_Rate, _x.container_713.Long_Accel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.container_710 is None:
        self.container_710 = can_package.msg.FB_EAIT_EPS()
      if self.container_711 is None:
        self.container_711 = can_package.msg.FB_EAIT_SCC()
      if self.container_712 is None:
        self.container_712 = can_package.msg.FB_EAIT_SPD()
      if self.container_713 is None:
        self.container_713 = can_package.msg.FB_EAIT_IMU()
      end = 0
      _x = self
      start = end
      end += 44
      (_x.container_710.EPS_En_FB, _x.container_710.Override_state, _x.container_710.EPS_control_state, _x.container_710.Steering_angle, _x.container_710.Control_SW_FB, _x.container_710.Str_Tq_1, _x.container_710.Str_Tq_2, _x.container_710.FB_alive_count, _x.container_711.ACC_control_state, _x.container_711.EPS_En_FB, _x.container_711.Override_ACC_state, _x.container_711.Override_BRK_state, _x.container_711.Vehicle_speed, _x.container_711.AEB_state, _x.container_711.Long_Accel, _x.container_711.Gear_Disp, _x.container_712.WHL_SPD_FL, _x.container_712.WHL_SPD_FR, _x.container_712.WHL_SPD_RL, _x.container_712.WHL_SPD_RR, _x.container_713.Lat_Accel, _x.container_713.Yaw_Rate, _x.container_713.Long_Accel,) = _get_struct_3BfB2H7BfB4H3f().unpack(str[start:end])
      self.container_710.EPS_En_FB = bool(self.container_710.EPS_En_FB)
      self.container_710.Override_state = bool(self.container_710.Override_state)
      self.container_710.Control_SW_FB = bool(self.container_710.Control_SW_FB)
      self.container_711.EPS_En_FB = bool(self.container_711.EPS_En_FB)
      self.container_711.Override_ACC_state = bool(self.container_711.Override_ACC_state)
      self.container_711.Override_BRK_state = bool(self.container_711.Override_BRK_state)
      self.container_711.AEB_state = bool(self.container_711.AEB_state)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3BfB2H7BfB4H3f().pack(_x.container_710.EPS_En_FB, _x.container_710.Override_state, _x.container_710.EPS_control_state, _x.container_710.Steering_angle, _x.container_710.Control_SW_FB, _x.container_710.Str_Tq_1, _x.container_710.Str_Tq_2, _x.container_710.FB_alive_count, _x.container_711.ACC_control_state, _x.container_711.EPS_En_FB, _x.container_711.Override_ACC_state, _x.container_711.Override_BRK_state, _x.container_711.Vehicle_speed, _x.container_711.AEB_state, _x.container_711.Long_Accel, _x.container_711.Gear_Disp, _x.container_712.WHL_SPD_FL, _x.container_712.WHL_SPD_FR, _x.container_712.WHL_SPD_RL, _x.container_712.WHL_SPD_RR, _x.container_713.Lat_Accel, _x.container_713.Yaw_Rate, _x.container_713.Long_Accel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.container_710 is None:
        self.container_710 = can_package.msg.FB_EAIT_EPS()
      if self.container_711 is None:
        self.container_711 = can_package.msg.FB_EAIT_SCC()
      if self.container_712 is None:
        self.container_712 = can_package.msg.FB_EAIT_SPD()
      if self.container_713 is None:
        self.container_713 = can_package.msg.FB_EAIT_IMU()
      end = 0
      _x = self
      start = end
      end += 44
      (_x.container_710.EPS_En_FB, _x.container_710.Override_state, _x.container_710.EPS_control_state, _x.container_710.Steering_angle, _x.container_710.Control_SW_FB, _x.container_710.Str_Tq_1, _x.container_710.Str_Tq_2, _x.container_710.FB_alive_count, _x.container_711.ACC_control_state, _x.container_711.EPS_En_FB, _x.container_711.Override_ACC_state, _x.container_711.Override_BRK_state, _x.container_711.Vehicle_speed, _x.container_711.AEB_state, _x.container_711.Long_Accel, _x.container_711.Gear_Disp, _x.container_712.WHL_SPD_FL, _x.container_712.WHL_SPD_FR, _x.container_712.WHL_SPD_RL, _x.container_712.WHL_SPD_RR, _x.container_713.Lat_Accel, _x.container_713.Yaw_Rate, _x.container_713.Long_Accel,) = _get_struct_3BfB2H7BfB4H3f().unpack(str[start:end])
      self.container_710.EPS_En_FB = bool(self.container_710.EPS_En_FB)
      self.container_710.Override_state = bool(self.container_710.Override_state)
      self.container_710.Control_SW_FB = bool(self.container_710.Control_SW_FB)
      self.container_711.EPS_En_FB = bool(self.container_711.EPS_En_FB)
      self.container_711.Override_ACC_state = bool(self.container_711.Override_ACC_state)
      self.container_711.Override_BRK_state = bool(self.container_711.Override_BRK_state)
      self.container_711.AEB_state = bool(self.container_711.AEB_state)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3BfB2H7BfB4H3f = None
def _get_struct_3BfB2H7BfB4H3f():
    global _struct_3BfB2H7BfB4H3f
    if _struct_3BfB2H7BfB4H3f is None:
        _struct_3BfB2H7BfB4H3f = struct.Struct("<3BfB2H7BfB4H3f")
    return _struct_3BfB2H7BfB4H3f
