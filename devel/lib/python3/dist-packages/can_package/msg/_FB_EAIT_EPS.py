# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from can_package/FB_EAIT_EPS.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FB_EAIT_EPS(genpy.Message):
  _md5sum = "b0fbecc9edcbb9cae7095ad825588218"
  _type = "can_package/FB_EAIT_EPS"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
bool EPS_En_FB          # 4|1@1+ (1,0) [0|1]
bool Override_state     # 7|1@1+ (1,0) [0|1]
uint8 EPS_control_state # 0|4@1+ (1,0) [0|10]
float32 Steering_angle  # 8|16@1- (0.1,0) [-540|540] deg
bool Control_SW_FB      # 5|1@1+ (1,0) [0|1]
uint16 Str_Tq_1        # 24|13@1+ (0.01,-20.48) [-20.48|61.43]
uint16 Str_Tq_2        # 40|12@1+ (0.1,-204.8) [-204.8|204.7]
uint8 FB_alive_count    # 56|8@1+ (1,0) [0|255]
"""
  __slots__ = ['EPS_En_FB','Override_state','EPS_control_state','Steering_angle','Control_SW_FB','Str_Tq_1','Str_Tq_2','FB_alive_count']
  _slot_types = ['bool','bool','uint8','float32','bool','uint16','uint16','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       EPS_En_FB,Override_state,EPS_control_state,Steering_angle,Control_SW_FB,Str_Tq_1,Str_Tq_2,FB_alive_count

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FB_EAIT_EPS, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.EPS_En_FB is None:
        self.EPS_En_FB = False
      if self.Override_state is None:
        self.Override_state = False
      if self.EPS_control_state is None:
        self.EPS_control_state = 0
      if self.Steering_angle is None:
        self.Steering_angle = 0.
      if self.Control_SW_FB is None:
        self.Control_SW_FB = False
      if self.Str_Tq_1 is None:
        self.Str_Tq_1 = 0
      if self.Str_Tq_2 is None:
        self.Str_Tq_2 = 0
      if self.FB_alive_count is None:
        self.FB_alive_count = 0
    else:
      self.EPS_En_FB = False
      self.Override_state = False
      self.EPS_control_state = 0
      self.Steering_angle = 0.
      self.Control_SW_FB = False
      self.Str_Tq_1 = 0
      self.Str_Tq_2 = 0
      self.FB_alive_count = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3BfB2HB().pack(_x.EPS_En_FB, _x.Override_state, _x.EPS_control_state, _x.Steering_angle, _x.Control_SW_FB, _x.Str_Tq_1, _x.Str_Tq_2, _x.FB_alive_count))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.EPS_En_FB, _x.Override_state, _x.EPS_control_state, _x.Steering_angle, _x.Control_SW_FB, _x.Str_Tq_1, _x.Str_Tq_2, _x.FB_alive_count,) = _get_struct_3BfB2HB().unpack(str[start:end])
      self.EPS_En_FB = bool(self.EPS_En_FB)
      self.Override_state = bool(self.Override_state)
      self.Control_SW_FB = bool(self.Control_SW_FB)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3BfB2HB().pack(_x.EPS_En_FB, _x.Override_state, _x.EPS_control_state, _x.Steering_angle, _x.Control_SW_FB, _x.Str_Tq_1, _x.Str_Tq_2, _x.FB_alive_count))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.EPS_En_FB, _x.Override_state, _x.EPS_control_state, _x.Steering_angle, _x.Control_SW_FB, _x.Str_Tq_1, _x.Str_Tq_2, _x.FB_alive_count,) = _get_struct_3BfB2HB().unpack(str[start:end])
      self.EPS_En_FB = bool(self.EPS_En_FB)
      self.Override_state = bool(self.Override_state)
      self.Control_SW_FB = bool(self.Control_SW_FB)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3BfB2HB = None
def _get_struct_3BfB2HB():
    global _struct_3BfB2HB
    if _struct_3BfB2HB is None:
        _struct_3BfB2HB = struct.Struct("<3BfB2HB")
    return _struct_3BfB2HB
