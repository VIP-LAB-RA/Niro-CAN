# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from can_package/FB_EAIT_SCC.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FB_EAIT_SCC(genpy.Message):
  _md5sum = "c259b215cb428509acd187f1b6939bc1"
  _type = "can_package/FB_EAIT_SCC"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
uint8 ACC_control_state  # 0|4@1+ (1,0) [0|10]
bool EPS_En_FB           # 4|1@1+ (1,0) [0|1]
bool Override_ACC_state  # 6|1@1+ (1,0) [0|1]
bool Override_BRK_state  # 7|1@1+ (1,0) [0|1]
uint8 Vehicle_speed      # 8|8@1+ (1,0) [0|255] kph
bool AEB_state           # 5|1@1+ (1,0) [0|1]
float32 Long_Accel       # 16|16@1+ (0.000127465,-4.17677312) [-4.17677312|4.176645655] m/s^2
uint8 Gear_Disp          # 32|4@1+ (1,0) [0|15]
"""
  __slots__ = ['ACC_control_state','EPS_En_FB','Override_ACC_state','Override_BRK_state','Vehicle_speed','AEB_state','Long_Accel','Gear_Disp']
  _slot_types = ['uint8','bool','bool','bool','uint8','bool','float32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ACC_control_state,EPS_En_FB,Override_ACC_state,Override_BRK_state,Vehicle_speed,AEB_state,Long_Accel,Gear_Disp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FB_EAIT_SCC, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ACC_control_state is None:
        self.ACC_control_state = 0
      if self.EPS_En_FB is None:
        self.EPS_En_FB = False
      if self.Override_ACC_state is None:
        self.Override_ACC_state = False
      if self.Override_BRK_state is None:
        self.Override_BRK_state = False
      if self.Vehicle_speed is None:
        self.Vehicle_speed = 0
      if self.AEB_state is None:
        self.AEB_state = False
      if self.Long_Accel is None:
        self.Long_Accel = 0.
      if self.Gear_Disp is None:
        self.Gear_Disp = 0
    else:
      self.ACC_control_state = 0
      self.EPS_En_FB = False
      self.Override_ACC_state = False
      self.Override_BRK_state = False
      self.Vehicle_speed = 0
      self.AEB_state = False
      self.Long_Accel = 0.
      self.Gear_Disp = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6BfB().pack(_x.ACC_control_state, _x.EPS_En_FB, _x.Override_ACC_state, _x.Override_BRK_state, _x.Vehicle_speed, _x.AEB_state, _x.Long_Accel, _x.Gear_Disp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.ACC_control_state, _x.EPS_En_FB, _x.Override_ACC_state, _x.Override_BRK_state, _x.Vehicle_speed, _x.AEB_state, _x.Long_Accel, _x.Gear_Disp,) = _get_struct_6BfB().unpack(str[start:end])
      self.EPS_En_FB = bool(self.EPS_En_FB)
      self.Override_ACC_state = bool(self.Override_ACC_state)
      self.Override_BRK_state = bool(self.Override_BRK_state)
      self.AEB_state = bool(self.AEB_state)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6BfB().pack(_x.ACC_control_state, _x.EPS_En_FB, _x.Override_ACC_state, _x.Override_BRK_state, _x.Vehicle_speed, _x.AEB_state, _x.Long_Accel, _x.Gear_Disp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.ACC_control_state, _x.EPS_En_FB, _x.Override_ACC_state, _x.Override_BRK_state, _x.Vehicle_speed, _x.AEB_state, _x.Long_Accel, _x.Gear_Disp,) = _get_struct_6BfB().unpack(str[start:end])
      self.EPS_En_FB = bool(self.EPS_En_FB)
      self.Override_ACC_state = bool(self.Override_ACC_state)
      self.Override_BRK_state = bool(self.Override_BRK_state)
      self.AEB_state = bool(self.AEB_state)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6BfB = None
def _get_struct_6BfB():
    global _struct_6BfB
    if _struct_6BfB is None:
        _struct_6BfB = struct.Struct("<6BfB")
    return _struct_6BfB
