# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from can_package/FB_EAIT_ETC.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FB_EAIT_ETC(genpy.Message):
  _md5sum = "adf0c54b44ed0a214b3be3c2060de9bb"
  _type = "can_package/FB_EAIT_ETC"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
uint16 acc_pedal_percent     # 0|16@1+ (1,0) [0|2000] %
uint16 brk_pedal_percent     # 16|16@1+ (1,0) [0|2000] %
uint8 turn_sig               # 32|8@1+ (1,0) [0|0]
bool LCS_button_sig          # 47|1@1+ (1,0) [0|0]
bool Limit_sig               # 45|1@1+ (1,0) [0|0]
uint8 Cruise_buttons_sig     # 40|4@1+ (1,0) [0|0]
"""
  __slots__ = ['acc_pedal_percent','brk_pedal_percent','turn_sig','LCS_button_sig','Limit_sig','Cruise_buttons_sig']
  _slot_types = ['uint16','uint16','uint8','bool','bool','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       acc_pedal_percent,brk_pedal_percent,turn_sig,LCS_button_sig,Limit_sig,Cruise_buttons_sig

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FB_EAIT_ETC, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.acc_pedal_percent is None:
        self.acc_pedal_percent = 0
      if self.brk_pedal_percent is None:
        self.brk_pedal_percent = 0
      if self.turn_sig is None:
        self.turn_sig = 0
      if self.LCS_button_sig is None:
        self.LCS_button_sig = False
      if self.Limit_sig is None:
        self.Limit_sig = False
      if self.Cruise_buttons_sig is None:
        self.Cruise_buttons_sig = 0
    else:
      self.acc_pedal_percent = 0
      self.brk_pedal_percent = 0
      self.turn_sig = 0
      self.LCS_button_sig = False
      self.Limit_sig = False
      self.Cruise_buttons_sig = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2H4B().pack(_x.acc_pedal_percent, _x.brk_pedal_percent, _x.turn_sig, _x.LCS_button_sig, _x.Limit_sig, _x.Cruise_buttons_sig))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.acc_pedal_percent, _x.brk_pedal_percent, _x.turn_sig, _x.LCS_button_sig, _x.Limit_sig, _x.Cruise_buttons_sig,) = _get_struct_2H4B().unpack(str[start:end])
      self.LCS_button_sig = bool(self.LCS_button_sig)
      self.Limit_sig = bool(self.Limit_sig)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2H4B().pack(_x.acc_pedal_percent, _x.brk_pedal_percent, _x.turn_sig, _x.LCS_button_sig, _x.Limit_sig, _x.Cruise_buttons_sig))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.acc_pedal_percent, _x.brk_pedal_percent, _x.turn_sig, _x.LCS_button_sig, _x.Limit_sig, _x.Cruise_buttons_sig,) = _get_struct_2H4B().unpack(str[start:end])
      self.LCS_button_sig = bool(self.LCS_button_sig)
      self.Limit_sig = bool(self.Limit_sig)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2H4B = None
def _get_struct_2H4B():
    global _struct_2H4B
    if _struct_2H4B is None:
        _struct_2H4B = struct.Struct("<2H4B")
    return _struct_2H4B
