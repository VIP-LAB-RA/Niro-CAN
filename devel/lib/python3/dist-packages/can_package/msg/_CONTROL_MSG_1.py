# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from can_package/CONTROL_MSG_1.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CONTROL_MSG_1(genpy.Message):
  _md5sum = "476713e91b4fe704c7741061e3ed1316"
  _type = "can_package/CONTROL_MSG_1"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool ControlSW
bool EPS_En
bool SCC_En
bool AEB_Act
uint8 EPS_Interval 
uint8 AEB_decel_value
uint8 Alive_count
"""
  __slots__ = ['ControlSW','EPS_En','SCC_En','AEB_Act','EPS_Interval','AEB_decel_value','Alive_count']
  _slot_types = ['bool','bool','bool','bool','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ControlSW,EPS_En,SCC_En,AEB_Act,EPS_Interval,AEB_decel_value,Alive_count

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CONTROL_MSG_1, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ControlSW is None:
        self.ControlSW = False
      if self.EPS_En is None:
        self.EPS_En = False
      if self.SCC_En is None:
        self.SCC_En = False
      if self.AEB_Act is None:
        self.AEB_Act = False
      if self.EPS_Interval is None:
        self.EPS_Interval = 0
      if self.AEB_decel_value is None:
        self.AEB_decel_value = 0
      if self.Alive_count is None:
        self.Alive_count = 0
    else:
      self.ControlSW = False
      self.EPS_En = False
      self.SCC_En = False
      self.AEB_Act = False
      self.EPS_Interval = 0
      self.AEB_decel_value = 0
      self.Alive_count = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7B().pack(_x.ControlSW, _x.EPS_En, _x.SCC_En, _x.AEB_Act, _x.EPS_Interval, _x.AEB_decel_value, _x.Alive_count))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.ControlSW, _x.EPS_En, _x.SCC_En, _x.AEB_Act, _x.EPS_Interval, _x.AEB_decel_value, _x.Alive_count,) = _get_struct_7B().unpack(str[start:end])
      self.ControlSW = bool(self.ControlSW)
      self.EPS_En = bool(self.EPS_En)
      self.SCC_En = bool(self.SCC_En)
      self.AEB_Act = bool(self.AEB_Act)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7B().pack(_x.ControlSW, _x.EPS_En, _x.SCC_En, _x.AEB_Act, _x.EPS_Interval, _x.AEB_decel_value, _x.Alive_count))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.ControlSW, _x.EPS_En, _x.SCC_En, _x.AEB_Act, _x.EPS_Interval, _x.AEB_decel_value, _x.Alive_count,) = _get_struct_7B().unpack(str[start:end])
      self.ControlSW = bool(self.ControlSW)
      self.EPS_En = bool(self.EPS_En)
      self.SCC_En = bool(self.SCC_En)
      self.AEB_Act = bool(self.AEB_Act)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7B = None
def _get_struct_7B():
    global _struct_7B
    if _struct_7B is None:
        _struct_7B = struct.Struct("<7B")
    return _struct_7B
