// Generated by gencpp from file can_package/FEEDBACK.msg
// DO NOT EDIT!


#ifndef CAN_PACKAGE_MESSAGE_FEEDBACK_H
#define CAN_PACKAGE_MESSAGE_FEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <can_package/FB_EAIT_EPS.h>
#include <can_package/FB_EAIT_SCC.h>
#include <can_package/FB_EAIT_SPD.h>
#include <can_package/FB_EAIT_IMU.h>

namespace can_package
{
template <class ContainerAllocator>
struct FEEDBACK_
{
  typedef FEEDBACK_<ContainerAllocator> Type;

  FEEDBACK_()
    : container_710()
    , container_711()
    , container_712()
    , container_713()  {
    }
  FEEDBACK_(const ContainerAllocator& _alloc)
    : container_710(_alloc)
    , container_711(_alloc)
    , container_712(_alloc)
    , container_713(_alloc)  {
  (void)_alloc;
    }



   typedef  ::can_package::FB_EAIT_EPS_<ContainerAllocator>  _container_710_type;
  _container_710_type container_710;

   typedef  ::can_package::FB_EAIT_SCC_<ContainerAllocator>  _container_711_type;
  _container_711_type container_711;

   typedef  ::can_package::FB_EAIT_SPD_<ContainerAllocator>  _container_712_type;
  _container_712_type container_712;

   typedef  ::can_package::FB_EAIT_IMU_<ContainerAllocator>  _container_713_type;
  _container_713_type container_713;





  typedef boost::shared_ptr< ::can_package::FEEDBACK_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::can_package::FEEDBACK_<ContainerAllocator> const> ConstPtr;

}; // struct FEEDBACK_

typedef ::can_package::FEEDBACK_<std::allocator<void> > FEEDBACK;

typedef boost::shared_ptr< ::can_package::FEEDBACK > FEEDBACKPtr;
typedef boost::shared_ptr< ::can_package::FEEDBACK const> FEEDBACKConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::can_package::FEEDBACK_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::can_package::FEEDBACK_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::can_package::FEEDBACK_<ContainerAllocator1> & lhs, const ::can_package::FEEDBACK_<ContainerAllocator2> & rhs)
{
  return lhs.container_710 == rhs.container_710 &&
    lhs.container_711 == rhs.container_711 &&
    lhs.container_712 == rhs.container_712 &&
    lhs.container_713 == rhs.container_713;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::can_package::FEEDBACK_<ContainerAllocator1> & lhs, const ::can_package::FEEDBACK_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace can_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::can_package::FEEDBACK_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::can_package::FEEDBACK_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_package::FEEDBACK_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_package::FEEDBACK_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_package::FEEDBACK_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_package::FEEDBACK_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::can_package::FEEDBACK_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f344d1fad6e38400d9bbe521baaeced1";
  }

  static const char* value(const ::can_package::FEEDBACK_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf344d1fad6e38400ULL;
  static const uint64_t static_value2 = 0xd9bbe521baaeced1ULL;
};

template<class ContainerAllocator>
struct DataType< ::can_package::FEEDBACK_<ContainerAllocator> >
{
  static const char* value()
  {
    return "can_package/FEEDBACK";
  }

  static const char* value(const ::can_package::FEEDBACK_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::can_package::FEEDBACK_<ContainerAllocator> >
{
  static const char* value()
  {
    return "can_package/FB_EAIT_EPS container_710\n"
"can_package/FB_EAIT_SCC container_711\n"
"can_package/FB_EAIT_SPD container_712\n"
"can_package/FB_EAIT_IMU container_713\n"
"\n"
"================================================================================\n"
"MSG: can_package/FB_EAIT_EPS\n"
"\n"
"bool EPS_En_FB          # 4|1@1+ (1,0) [0|1]\n"
"bool Override_state     # 7|1@1+ (1,0) [0|1]\n"
"uint8 EPS_control_state # 0|4@1+ (1,0) [0|10]\n"
"float32 Steering_angle  # 8|16@1- (0.1,0) [-540|540] deg\n"
"bool Control_SW_FB      # 5|1@1+ (1,0) [0|1]\n"
"uint16 Str_Tq_1        # 24|13@1+ (0.01,-20.48) [-20.48|61.43]\n"
"uint16 Str_Tq_2        # 40|12@1+ (0.1,-204.8) [-204.8|204.7]\n"
"uint8 FB_alive_count    # 56|8@1+ (1,0) [0|255]\n"
"\n"
"================================================================================\n"
"MSG: can_package/FB_EAIT_SCC\n"
"\n"
"uint8 ACC_control_state  # 0|4@1+ (1,0) [0|10]\n"
"bool EPS_En_FB           # 4|1@1+ (1,0) [0|1]\n"
"bool Override_ACC_state  # 6|1@1+ (1,0) [0|1]\n"
"bool Override_BRK_state  # 7|1@1+ (1,0) [0|1]\n"
"uint8 Vehicle_speed      # 8|8@1+ (1,0) [0|255] kph\n"
"bool AEB_state           # 5|1@1+ (1,0) [0|1]\n"
"float32 Long_Accel       # 16|16@1+ (0.000127465,-4.17677312) [-4.17677312|4.176645655] m/s^2\n"
"uint8 Gear_Disp          # 32|4@1+ (1,0) [0|15]\n"
"\n"
"================================================================================\n"
"MSG: can_package/FB_EAIT_SPD\n"
"\n"
"uint16 WHL_SPD_FL    # 0|14@1+ (0.03125,0) [0|511.96875]\n"
"uint16 WHL_SPD_FR    # 16|14@1+ (0.03125,0) [0|511.96875]\n"
"uint16 WHL_SPD_RL    # 32|14@1+ (0.03125,0) [0|511.96875]\n"
"uint16 WHL_SPD_RR    # 48|14@1+ (0.03125,0) [0|511.96875]\n"
"\n"
"================================================================================\n"
"MSG: can_package/FB_EAIT_IMU\n"
"float32 Lat_Accel    # 16|16@1+ (0.000127564,-4.17677312) [-4.17677312|4.18313362] m/s^2\n"
"float32 Yaw_Rate     # 32|16@1+ (0.005,-163.84) [-163.84|163.835] deg/s\n"
"float32 Long_Accel   # 0|16@1+ (0.001249157,-40.9323) [-40.9323|4.176645655] m/s^2\n"
;
  }

  static const char* value(const ::can_package::FEEDBACK_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::can_package::FEEDBACK_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.container_710);
      stream.next(m.container_711);
      stream.next(m.container_712);
      stream.next(m.container_713);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FEEDBACK_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::can_package::FEEDBACK_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::can_package::FEEDBACK_<ContainerAllocator>& v)
  {
    s << indent << "container_710: ";
    s << std::endl;
    Printer< ::can_package::FB_EAIT_EPS_<ContainerAllocator> >::stream(s, indent + "  ", v.container_710);
    s << indent << "container_711: ";
    s << std::endl;
    Printer< ::can_package::FB_EAIT_SCC_<ContainerAllocator> >::stream(s, indent + "  ", v.container_711);
    s << indent << "container_712: ";
    s << std::endl;
    Printer< ::can_package::FB_EAIT_SPD_<ContainerAllocator> >::stream(s, indent + "  ", v.container_712);
    s << indent << "container_713: ";
    s << std::endl;
    Printer< ::can_package::FB_EAIT_IMU_<ContainerAllocator> >::stream(s, indent + "  ", v.container_713);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAN_PACKAGE_MESSAGE_FEEDBACK_H
