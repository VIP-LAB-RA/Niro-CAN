// Generated by gencpp from file can_package/FB_EAIT_ETC.msg
// DO NOT EDIT!


#ifndef CAN_PACKAGE_MESSAGE_FB_EAIT_ETC_H
#define CAN_PACKAGE_MESSAGE_FB_EAIT_ETC_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace can_package
{
template <class ContainerAllocator>
struct FB_EAIT_ETC_
{
  typedef FB_EAIT_ETC_<ContainerAllocator> Type;

  FB_EAIT_ETC_()
    : acc_pedal_percent(0)
    , brk_pedal_percent(0)
    , turn_sig(0)
    , LCS_button_sig(false)
    , Limit_sig(false)
    , Cruise_buttons_sig(0)  {
    }
  FB_EAIT_ETC_(const ContainerAllocator& _alloc)
    : acc_pedal_percent(0)
    , brk_pedal_percent(0)
    , turn_sig(0)
    , LCS_button_sig(false)
    , Limit_sig(false)
    , Cruise_buttons_sig(0)  {
  (void)_alloc;
    }



   typedef uint16_t _acc_pedal_percent_type;
  _acc_pedal_percent_type acc_pedal_percent;

   typedef uint16_t _brk_pedal_percent_type;
  _brk_pedal_percent_type brk_pedal_percent;

   typedef uint8_t _turn_sig_type;
  _turn_sig_type turn_sig;

   typedef uint8_t _LCS_button_sig_type;
  _LCS_button_sig_type LCS_button_sig;

   typedef uint8_t _Limit_sig_type;
  _Limit_sig_type Limit_sig;

   typedef uint8_t _Cruise_buttons_sig_type;
  _Cruise_buttons_sig_type Cruise_buttons_sig;





  typedef boost::shared_ptr< ::can_package::FB_EAIT_ETC_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::can_package::FB_EAIT_ETC_<ContainerAllocator> const> ConstPtr;

}; // struct FB_EAIT_ETC_

typedef ::can_package::FB_EAIT_ETC_<std::allocator<void> > FB_EAIT_ETC;

typedef boost::shared_ptr< ::can_package::FB_EAIT_ETC > FB_EAIT_ETCPtr;
typedef boost::shared_ptr< ::can_package::FB_EAIT_ETC const> FB_EAIT_ETCConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::can_package::FB_EAIT_ETC_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::can_package::FB_EAIT_ETC_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::can_package::FB_EAIT_ETC_<ContainerAllocator1> & lhs, const ::can_package::FB_EAIT_ETC_<ContainerAllocator2> & rhs)
{
  return lhs.acc_pedal_percent == rhs.acc_pedal_percent &&
    lhs.brk_pedal_percent == rhs.brk_pedal_percent &&
    lhs.turn_sig == rhs.turn_sig &&
    lhs.LCS_button_sig == rhs.LCS_button_sig &&
    lhs.Limit_sig == rhs.Limit_sig &&
    lhs.Cruise_buttons_sig == rhs.Cruise_buttons_sig;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::can_package::FB_EAIT_ETC_<ContainerAllocator1> & lhs, const ::can_package::FB_EAIT_ETC_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace can_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::can_package::FB_EAIT_ETC_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::can_package::FB_EAIT_ETC_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_package::FB_EAIT_ETC_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_package::FB_EAIT_ETC_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_package::FB_EAIT_ETC_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_package::FB_EAIT_ETC_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::can_package::FB_EAIT_ETC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "adf0c54b44ed0a214b3be3c2060de9bb";
  }

  static const char* value(const ::can_package::FB_EAIT_ETC_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xadf0c54b44ed0a21ULL;
  static const uint64_t static_value2 = 0x4b3be3c2060de9bbULL;
};

template<class ContainerAllocator>
struct DataType< ::can_package::FB_EAIT_ETC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "can_package/FB_EAIT_ETC";
  }

  static const char* value(const ::can_package::FB_EAIT_ETC_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::can_package::FB_EAIT_ETC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint16 acc_pedal_percent     # 0|16@1+ (1,0) [0|2000] %\n"
"uint16 brk_pedal_percent     # 16|16@1+ (1,0) [0|2000] %\n"
"uint8 turn_sig               # 32|8@1+ (1,0) [0|0]\n"
"bool LCS_button_sig          # 47|1@1+ (1,0) [0|0]\n"
"bool Limit_sig               # 45|1@1+ (1,0) [0|0]\n"
"uint8 Cruise_buttons_sig     # 40|4@1+ (1,0) [0|0]\n"
;
  }

  static const char* value(const ::can_package::FB_EAIT_ETC_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::can_package::FB_EAIT_ETC_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.acc_pedal_percent);
      stream.next(m.brk_pedal_percent);
      stream.next(m.turn_sig);
      stream.next(m.LCS_button_sig);
      stream.next(m.Limit_sig);
      stream.next(m.Cruise_buttons_sig);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FB_EAIT_ETC_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::can_package::FB_EAIT_ETC_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::can_package::FB_EAIT_ETC_<ContainerAllocator>& v)
  {
    s << indent << "acc_pedal_percent: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.acc_pedal_percent);
    s << indent << "brk_pedal_percent: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.brk_pedal_percent);
    s << indent << "turn_sig: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.turn_sig);
    s << indent << "LCS_button_sig: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LCS_button_sig);
    s << indent << "Limit_sig: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Limit_sig);
    s << indent << "Cruise_buttons_sig: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Cruise_buttons_sig);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAN_PACKAGE_MESSAGE_FB_EAIT_ETC_H
