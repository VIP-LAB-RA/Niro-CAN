// Generated by gencpp from file can_package/FB_EAIT_IMU.msg
// DO NOT EDIT!


#ifndef CAN_PACKAGE_MESSAGE_FB_EAIT_IMU_H
#define CAN_PACKAGE_MESSAGE_FB_EAIT_IMU_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace can_package
{
template <class ContainerAllocator>
struct FB_EAIT_IMU_
{
  typedef FB_EAIT_IMU_<ContainerAllocator> Type;

  FB_EAIT_IMU_()
    : Lat_Accel(0.0)
    , Yaw_Rate(0.0)
    , Long_Accel(0.0)  {
    }
  FB_EAIT_IMU_(const ContainerAllocator& _alloc)
    : Lat_Accel(0.0)
    , Yaw_Rate(0.0)
    , Long_Accel(0.0)  {
  (void)_alloc;
    }



   typedef float _Lat_Accel_type;
  _Lat_Accel_type Lat_Accel;

   typedef float _Yaw_Rate_type;
  _Yaw_Rate_type Yaw_Rate;

   typedef float _Long_Accel_type;
  _Long_Accel_type Long_Accel;





  typedef boost::shared_ptr< ::can_package::FB_EAIT_IMU_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::can_package::FB_EAIT_IMU_<ContainerAllocator> const> ConstPtr;

}; // struct FB_EAIT_IMU_

typedef ::can_package::FB_EAIT_IMU_<std::allocator<void> > FB_EAIT_IMU;

typedef boost::shared_ptr< ::can_package::FB_EAIT_IMU > FB_EAIT_IMUPtr;
typedef boost::shared_ptr< ::can_package::FB_EAIT_IMU const> FB_EAIT_IMUConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::can_package::FB_EAIT_IMU_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::can_package::FB_EAIT_IMU_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::can_package::FB_EAIT_IMU_<ContainerAllocator1> & lhs, const ::can_package::FB_EAIT_IMU_<ContainerAllocator2> & rhs)
{
  return lhs.Lat_Accel == rhs.Lat_Accel &&
    lhs.Yaw_Rate == rhs.Yaw_Rate &&
    lhs.Long_Accel == rhs.Long_Accel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::can_package::FB_EAIT_IMU_<ContainerAllocator1> & lhs, const ::can_package::FB_EAIT_IMU_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace can_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::can_package::FB_EAIT_IMU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::can_package::FB_EAIT_IMU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_package::FB_EAIT_IMU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_package::FB_EAIT_IMU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_package::FB_EAIT_IMU_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_package::FB_EAIT_IMU_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::can_package::FB_EAIT_IMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5a954aa3b789111970bbde7390205462";
  }

  static const char* value(const ::can_package::FB_EAIT_IMU_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5a954aa3b7891119ULL;
  static const uint64_t static_value2 = 0x70bbde7390205462ULL;
};

template<class ContainerAllocator>
struct DataType< ::can_package::FB_EAIT_IMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "can_package/FB_EAIT_IMU";
  }

  static const char* value(const ::can_package::FB_EAIT_IMU_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::can_package::FB_EAIT_IMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 Lat_Accel    # 16|16@1+ (0.000127564,-4.17677312) [-4.17677312|4.18313362] m/s^2\n"
"float32 Yaw_Rate     # 32|16@1+ (0.005,-163.84) [-163.84|163.835] deg/s\n"
"float32 Long_Accel   # 0|16@1+ (0.001249157,-40.9323) [-40.9323|4.176645655] m/s^2\n"
;
  }

  static const char* value(const ::can_package::FB_EAIT_IMU_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::can_package::FB_EAIT_IMU_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Lat_Accel);
      stream.next(m.Yaw_Rate);
      stream.next(m.Long_Accel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FB_EAIT_IMU_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::can_package::FB_EAIT_IMU_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::can_package::FB_EAIT_IMU_<ContainerAllocator>& v)
  {
    s << indent << "Lat_Accel: ";
    Printer<float>::stream(s, indent + "  ", v.Lat_Accel);
    s << indent << "Yaw_Rate: ";
    Printer<float>::stream(s, indent + "  ", v.Yaw_Rate);
    s << indent << "Long_Accel: ";
    Printer<float>::stream(s, indent + "  ", v.Long_Accel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAN_PACKAGE_MESSAGE_FB_EAIT_IMU_H
