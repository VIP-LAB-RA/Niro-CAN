// Generated by gencpp from file can_package/FB_EAIT_SPD.msg
// DO NOT EDIT!


#ifndef CAN_PACKAGE_MESSAGE_FB_EAIT_SPD_H
#define CAN_PACKAGE_MESSAGE_FB_EAIT_SPD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace can_package
{
template <class ContainerAllocator>
struct FB_EAIT_SPD_
{
  typedef FB_EAIT_SPD_<ContainerAllocator> Type;

  FB_EAIT_SPD_()
    : WHL_SPD_FL(0)
    , WHL_SPD_FR(0)
    , WHL_SPD_RL(0)
    , WHL_SPD_RR(0)  {
    }
  FB_EAIT_SPD_(const ContainerAllocator& _alloc)
    : WHL_SPD_FL(0)
    , WHL_SPD_FR(0)
    , WHL_SPD_RL(0)
    , WHL_SPD_RR(0)  {
  (void)_alloc;
    }



   typedef uint16_t _WHL_SPD_FL_type;
  _WHL_SPD_FL_type WHL_SPD_FL;

   typedef uint16_t _WHL_SPD_FR_type;
  _WHL_SPD_FR_type WHL_SPD_FR;

   typedef uint16_t _WHL_SPD_RL_type;
  _WHL_SPD_RL_type WHL_SPD_RL;

   typedef uint16_t _WHL_SPD_RR_type;
  _WHL_SPD_RR_type WHL_SPD_RR;





  typedef boost::shared_ptr< ::can_package::FB_EAIT_SPD_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::can_package::FB_EAIT_SPD_<ContainerAllocator> const> ConstPtr;

}; // struct FB_EAIT_SPD_

typedef ::can_package::FB_EAIT_SPD_<std::allocator<void> > FB_EAIT_SPD;

typedef boost::shared_ptr< ::can_package::FB_EAIT_SPD > FB_EAIT_SPDPtr;
typedef boost::shared_ptr< ::can_package::FB_EAIT_SPD const> FB_EAIT_SPDConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::can_package::FB_EAIT_SPD_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::can_package::FB_EAIT_SPD_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::can_package::FB_EAIT_SPD_<ContainerAllocator1> & lhs, const ::can_package::FB_EAIT_SPD_<ContainerAllocator2> & rhs)
{
  return lhs.WHL_SPD_FL == rhs.WHL_SPD_FL &&
    lhs.WHL_SPD_FR == rhs.WHL_SPD_FR &&
    lhs.WHL_SPD_RL == rhs.WHL_SPD_RL &&
    lhs.WHL_SPD_RR == rhs.WHL_SPD_RR;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::can_package::FB_EAIT_SPD_<ContainerAllocator1> & lhs, const ::can_package::FB_EAIT_SPD_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace can_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::can_package::FB_EAIT_SPD_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::can_package::FB_EAIT_SPD_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_package::FB_EAIT_SPD_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_package::FB_EAIT_SPD_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_package::FB_EAIT_SPD_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_package::FB_EAIT_SPD_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::can_package::FB_EAIT_SPD_<ContainerAllocator> >
{
  static const char* value()
  {
    return "942f3c288489605fdeb5cae068a7cd8a";
  }

  static const char* value(const ::can_package::FB_EAIT_SPD_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x942f3c288489605fULL;
  static const uint64_t static_value2 = 0xdeb5cae068a7cd8aULL;
};

template<class ContainerAllocator>
struct DataType< ::can_package::FB_EAIT_SPD_<ContainerAllocator> >
{
  static const char* value()
  {
    return "can_package/FB_EAIT_SPD";
  }

  static const char* value(const ::can_package::FB_EAIT_SPD_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::can_package::FB_EAIT_SPD_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint16 WHL_SPD_FL    # 0|14@1+ (0.03125,0) [0|511.96875]\n"
"uint16 WHL_SPD_FR    # 16|14@1+ (0.03125,0) [0|511.96875]\n"
"uint16 WHL_SPD_RL    # 32|14@1+ (0.03125,0) [0|511.96875]\n"
"uint16 WHL_SPD_RR    # 48|14@1+ (0.03125,0) [0|511.96875]\n"
;
  }

  static const char* value(const ::can_package::FB_EAIT_SPD_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::can_package::FB_EAIT_SPD_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.WHL_SPD_FL);
      stream.next(m.WHL_SPD_FR);
      stream.next(m.WHL_SPD_RL);
      stream.next(m.WHL_SPD_RR);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FB_EAIT_SPD_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::can_package::FB_EAIT_SPD_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::can_package::FB_EAIT_SPD_<ContainerAllocator>& v)
  {
    s << indent << "WHL_SPD_FL: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.WHL_SPD_FL);
    s << indent << "WHL_SPD_FR: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.WHL_SPD_FR);
    s << indent << "WHL_SPD_RL: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.WHL_SPD_RL);
    s << indent << "WHL_SPD_RR: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.WHL_SPD_RR);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAN_PACKAGE_MESSAGE_FB_EAIT_SPD_H
