// Generated by gencpp from file can_package/CONTROL_MSG_2.msg
// DO NOT EDIT!


#ifndef CAN_PACKAGE_MESSAGE_CONTROL_MSG_2_H
#define CAN_PACKAGE_MESSAGE_CONTROL_MSG_2_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace can_package
{
template <class ContainerAllocator>
struct CONTROL_MSG_2_
{
  typedef CONTROL_MSG_2_<ContainerAllocator> Type;

  CONTROL_MSG_2_()
    : EPS_command(0)
    , SCC_command(0)  {
    }
  CONTROL_MSG_2_(const ContainerAllocator& _alloc)
    : EPS_command(0)
    , SCC_command(0)  {
  (void)_alloc;
    }



   typedef int16_t _EPS_command_type;
  _EPS_command_type EPS_command;

   typedef uint16_t _SCC_command_type;
  _SCC_command_type SCC_command;





  typedef boost::shared_ptr< ::can_package::CONTROL_MSG_2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::can_package::CONTROL_MSG_2_<ContainerAllocator> const> ConstPtr;

}; // struct CONTROL_MSG_2_

typedef ::can_package::CONTROL_MSG_2_<std::allocator<void> > CONTROL_MSG_2;

typedef boost::shared_ptr< ::can_package::CONTROL_MSG_2 > CONTROL_MSG_2Ptr;
typedef boost::shared_ptr< ::can_package::CONTROL_MSG_2 const> CONTROL_MSG_2ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::can_package::CONTROL_MSG_2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::can_package::CONTROL_MSG_2_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::can_package::CONTROL_MSG_2_<ContainerAllocator1> & lhs, const ::can_package::CONTROL_MSG_2_<ContainerAllocator2> & rhs)
{
  return lhs.EPS_command == rhs.EPS_command &&
    lhs.SCC_command == rhs.SCC_command;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::can_package::CONTROL_MSG_2_<ContainerAllocator1> & lhs, const ::can_package::CONTROL_MSG_2_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace can_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::can_package::CONTROL_MSG_2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::can_package::CONTROL_MSG_2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_package::CONTROL_MSG_2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_package::CONTROL_MSG_2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_package::CONTROL_MSG_2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_package::CONTROL_MSG_2_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::can_package::CONTROL_MSG_2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7868707315b8b995234d9673967cb406";
  }

  static const char* value(const ::can_package::CONTROL_MSG_2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7868707315b8b995ULL;
  static const uint64_t static_value2 = 0x234d9673967cb406ULL;
};

template<class ContainerAllocator>
struct DataType< ::can_package::CONTROL_MSG_2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "can_package/CONTROL_MSG_2";
  }

  static const char* value(const ::can_package::CONTROL_MSG_2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::can_package::CONTROL_MSG_2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 EPS_command\n"
"uint16 SCC_command\n"
;
  }

  static const char* value(const ::can_package::CONTROL_MSG_2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::can_package::CONTROL_MSG_2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.EPS_command);
      stream.next(m.SCC_command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CONTROL_MSG_2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::can_package::CONTROL_MSG_2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::can_package::CONTROL_MSG_2_<ContainerAllocator>& v)
  {
    s << indent << "EPS_command: ";
    Printer<int16_t>::stream(s, indent + "  ", v.EPS_command);
    s << indent << "SCC_command: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.SCC_command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAN_PACKAGE_MESSAGE_CONTROL_MSG_2_H
