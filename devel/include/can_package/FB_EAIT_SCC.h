// Generated by gencpp from file can_package/FB_EAIT_SCC.msg
// DO NOT EDIT!


#ifndef CAN_PACKAGE_MESSAGE_FB_EAIT_SCC_H
#define CAN_PACKAGE_MESSAGE_FB_EAIT_SCC_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace can_package
{
template <class ContainerAllocator>
struct FB_EAIT_SCC_
{
  typedef FB_EAIT_SCC_<ContainerAllocator> Type;

  FB_EAIT_SCC_()
    : ACC_control_state(0)
    , EPS_En_FB(false)
    , Override_ACC_state(false)
    , Override_BRK_state(false)
    , Vehicle_speed(0)
    , AEB_state(false)
    , Long_Accel(0.0)
    , Gear_Disp(0)  {
    }
  FB_EAIT_SCC_(const ContainerAllocator& _alloc)
    : ACC_control_state(0)
    , EPS_En_FB(false)
    , Override_ACC_state(false)
    , Override_BRK_state(false)
    , Vehicle_speed(0)
    , AEB_state(false)
    , Long_Accel(0.0)
    , Gear_Disp(0)  {
  (void)_alloc;
    }



   typedef uint8_t _ACC_control_state_type;
  _ACC_control_state_type ACC_control_state;

   typedef uint8_t _EPS_En_FB_type;
  _EPS_En_FB_type EPS_En_FB;

   typedef uint8_t _Override_ACC_state_type;
  _Override_ACC_state_type Override_ACC_state;

   typedef uint8_t _Override_BRK_state_type;
  _Override_BRK_state_type Override_BRK_state;

   typedef uint8_t _Vehicle_speed_type;
  _Vehicle_speed_type Vehicle_speed;

   typedef uint8_t _AEB_state_type;
  _AEB_state_type AEB_state;

   typedef float _Long_Accel_type;
  _Long_Accel_type Long_Accel;

   typedef uint8_t _Gear_Disp_type;
  _Gear_Disp_type Gear_Disp;





  typedef boost::shared_ptr< ::can_package::FB_EAIT_SCC_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::can_package::FB_EAIT_SCC_<ContainerAllocator> const> ConstPtr;

}; // struct FB_EAIT_SCC_

typedef ::can_package::FB_EAIT_SCC_<std::allocator<void> > FB_EAIT_SCC;

typedef boost::shared_ptr< ::can_package::FB_EAIT_SCC > FB_EAIT_SCCPtr;
typedef boost::shared_ptr< ::can_package::FB_EAIT_SCC const> FB_EAIT_SCCConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::can_package::FB_EAIT_SCC_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::can_package::FB_EAIT_SCC_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::can_package::FB_EAIT_SCC_<ContainerAllocator1> & lhs, const ::can_package::FB_EAIT_SCC_<ContainerAllocator2> & rhs)
{
  return lhs.ACC_control_state == rhs.ACC_control_state &&
    lhs.EPS_En_FB == rhs.EPS_En_FB &&
    lhs.Override_ACC_state == rhs.Override_ACC_state &&
    lhs.Override_BRK_state == rhs.Override_BRK_state &&
    lhs.Vehicle_speed == rhs.Vehicle_speed &&
    lhs.AEB_state == rhs.AEB_state &&
    lhs.Long_Accel == rhs.Long_Accel &&
    lhs.Gear_Disp == rhs.Gear_Disp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::can_package::FB_EAIT_SCC_<ContainerAllocator1> & lhs, const ::can_package::FB_EAIT_SCC_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace can_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::can_package::FB_EAIT_SCC_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::can_package::FB_EAIT_SCC_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_package::FB_EAIT_SCC_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_package::FB_EAIT_SCC_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_package::FB_EAIT_SCC_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_package::FB_EAIT_SCC_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::can_package::FB_EAIT_SCC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c259b215cb428509acd187f1b6939bc1";
  }

  static const char* value(const ::can_package::FB_EAIT_SCC_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc259b215cb428509ULL;
  static const uint64_t static_value2 = 0xacd187f1b6939bc1ULL;
};

template<class ContainerAllocator>
struct DataType< ::can_package::FB_EAIT_SCC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "can_package/FB_EAIT_SCC";
  }

  static const char* value(const ::can_package::FB_EAIT_SCC_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::can_package::FB_EAIT_SCC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint8 ACC_control_state  # 0|4@1+ (1,0) [0|10]\n"
"bool EPS_En_FB           # 4|1@1+ (1,0) [0|1]\n"
"bool Override_ACC_state  # 6|1@1+ (1,0) [0|1]\n"
"bool Override_BRK_state  # 7|1@1+ (1,0) [0|1]\n"
"uint8 Vehicle_speed      # 8|8@1+ (1,0) [0|255] kph\n"
"bool AEB_state           # 5|1@1+ (1,0) [0|1]\n"
"float32 Long_Accel       # 16|16@1+ (0.000127465,-4.17677312) [-4.17677312|4.176645655] m/s^2\n"
"uint8 Gear_Disp          # 32|4@1+ (1,0) [0|15]\n"
;
  }

  static const char* value(const ::can_package::FB_EAIT_SCC_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::can_package::FB_EAIT_SCC_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ACC_control_state);
      stream.next(m.EPS_En_FB);
      stream.next(m.Override_ACC_state);
      stream.next(m.Override_BRK_state);
      stream.next(m.Vehicle_speed);
      stream.next(m.AEB_state);
      stream.next(m.Long_Accel);
      stream.next(m.Gear_Disp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FB_EAIT_SCC_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::can_package::FB_EAIT_SCC_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::can_package::FB_EAIT_SCC_<ContainerAllocator>& v)
  {
    s << indent << "ACC_control_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ACC_control_state);
    s << indent << "EPS_En_FB: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EPS_En_FB);
    s << indent << "Override_ACC_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Override_ACC_state);
    s << indent << "Override_BRK_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Override_BRK_state);
    s << indent << "Vehicle_speed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Vehicle_speed);
    s << indent << "AEB_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.AEB_state);
    s << indent << "Long_Accel: ";
    Printer<float>::stream(s, indent + "  ", v.Long_Accel);
    s << indent << "Gear_Disp: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Gear_Disp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAN_PACKAGE_MESSAGE_FB_EAIT_SCC_H
